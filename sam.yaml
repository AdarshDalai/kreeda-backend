AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Kreeda Cricket Scoring API - Serverless deployment using only AWS Always Free services

Globals:
  Function:
    Timeout: 30
    MemorySize: 256  # Cost optimization for Always Free tier
    Runtime: python3.11
    Architectures:
      - arm64  # Cost optimization for Lambda
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref CricketDataTable
        COGNITO_USER_POOL_ID: !Ref CognitoUserPool
        COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
        USE_COGNITO: "true"

Resources:
  # DynamoDB Table for Cricket Data
  CricketDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: kreeda-cricket-data
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Cognito User Pool for Authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: kreeda-users
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: kreeda-web-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://kreeda.cloudsbay.com/auth/callback
      LogoutURLs:
        - https://kreeda.cloudsbay.com/logout



  # Lambda Function
  KreedaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: kreeda-backend
      CodeUri: .
      Handler: lambda_handler.lambda_handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref CricketDataTable
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
          USE_COGNITO: "true"
          ENVIRONMENT: "production"
          LOG_LEVEL: "INFO"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CricketDataTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:DescribeTable
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
              Resource:
                - !GetAtt CricketDataTable.Arn
                - !Sub "${CricketDataTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:ListUsers
                - cognito-idp:AdminGetUser
              Resource:
                - !Sub "arn:aws:cognito-idp:${AWS::Region}:*:userpool/${CognitoUserPool}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref KreedaApi



  # API Gateway
  KreedaApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: kreeda-api
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${KreedaApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: APIOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: APIOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          Compress: true
          ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Content-Type
        PriceClass: PriceClass_100  # Free tier eligible
        HttpVersion: http2
        DefaultRootObject: /

  # Route 53 Record (optional - requires domain ownership)
  # Route53Record:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: ${HostedZoneId}
  #     Name: kreeda.cloudsbay.com
  #     Type: A
  #     AliasTarget:
  #       DNSName: !GetAtt CloudFrontDistribution.DomainName
  #       HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID

  # CloudWatch Alarms (Free tier)
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: kreeda-lambda-errors
      AlarmDescription: Alert when Lambda function errors exceed threshold
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref KreedaFunction

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: kreeda-lambda-duration
      AlarmDescription: Alert when Lambda function duration exceeds threshold
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25000  # 25 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref KreedaFunction

  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: kreeda-dynamodb-throttles
      AlarmDescription: Alert when DynamoDB throttling occurs
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref CricketDataTable

  # CloudWatch Dashboard
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: kreeda-backend-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${KreedaFunction}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${KreedaFunction}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Duration",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Errors", "FunctionName", "${KreedaFunction}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${CricketDataTable}"],
                  [".", "ConsumedWriteCapacityUnits", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "DynamoDB Capacity Units",
                "period": 300
              }
            }
          ]
        }

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${KreedaApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
    Export:
      Name: KreedaApiUrl

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: KreedaCloudFrontUrl

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: KreedaUserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: KreedaUserPoolClientId

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref CricketDataTable
    Export:
      Name: KreedaDynamoDBTable
