"""Initial schema: user auth, profiles, and complete cricket module

Revision ID: 40cfc5d68d9c
Revises: 
Create Date: 2025-10-26 07:33:29.481140

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '40cfc5d68d9c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_auth',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('is_email_verified', sa.Boolean(), nullable=True),
    sa.Column('is_phone_verified', sa.Boolean(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('sport_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('sport_type', sa.Enum('CRICKET', 'FOOTBALL', 'HOCKEY', 'BASKETBALL', name='sport_type'), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('verification_proof', sa.String(), nullable=True),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.Column('verified_by_user_id', sa.UUID(), nullable=True),
    sa.Column('visibility', sa.Enum('PUBLIC', 'FRIENDS', 'PRIVATE', name='profile_visibility'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_auth.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['verified_by_user_id'], ['user_auth.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('short_name', sa.String(length=50), nullable=True),
    sa.Column('sport_type', sa.Enum('CRICKET', 'FOOTBALL', 'HOCKEY', 'BASKETBALL', name='sport_type'), nullable=False),
    sa.Column('team_type', sa.Enum('CASUAL', 'CLUB', 'TOURNAMENT_REGISTERED', 'FRANCHISE', name='team_type'), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('logo_url', sa.String(length=500), nullable=True),
    sa.Column('team_colors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('home_ground', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('disbanded_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user_auth.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('avatar_url', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('roles', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user_auth.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('cricket_player_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sport_profile_id', sa.UUID(), nullable=False),
    sa.Column('playing_role', sa.Enum('BATSMAN', 'BOWLER', 'ALL_ROUNDER', 'WICKET_KEEPER', name='playing_role'), nullable=False),
    sa.Column('batting_style', sa.Enum('RIGHT_HAND', 'LEFT_HAND', name='batting_style'), nullable=True),
    sa.Column('bowling_style', sa.Enum('RIGHT_ARM_FAST', 'RIGHT_ARM_MEDIUM', 'RIGHT_ARM_OFF_SPIN', 'RIGHT_ARM_LEG_SPIN', 'LEFT_ARM_FAST', 'LEFT_ARM_MEDIUM', 'LEFT_ARM_ORTHODOX', 'LEFT_ARM_CHINAMAN', name='bowling_style'), nullable=True),
    sa.Column('matches_played', sa.Integer(), nullable=True),
    sa.Column('total_runs', sa.Integer(), nullable=True),
    sa.Column('total_wickets', sa.Integer(), nullable=True),
    sa.Column('catches', sa.Integer(), nullable=True),
    sa.Column('stumpings', sa.Integer(), nullable=True),
    sa.Column('run_outs', sa.Integer(), nullable=True),
    sa.Column('batting_avg', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('strike_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('highest_score', sa.Integer(), nullable=True),
    sa.Column('fifties', sa.Integer(), nullable=True),
    sa.Column('hundreds', sa.Integer(), nullable=True),
    sa.Column('balls_faced', sa.Integer(), nullable=True),
    sa.Column('fours', sa.Integer(), nullable=True),
    sa.Column('sixes', sa.Integer(), nullable=True),
    sa.Column('bowling_avg', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('economy_rate', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('best_bowling', sa.String(length=10), nullable=True),
    sa.Column('five_wickets', sa.Integer(), nullable=True),
    sa.Column('ten_wickets', sa.Integer(), nullable=True),
    sa.Column('balls_bowled', sa.Integer(), nullable=True),
    sa.Column('runs_conceded', sa.Integer(), nullable=True),
    sa.Column('maidens', sa.Integer(), nullable=True),
    sa.Column('jersey_number', sa.Integer(), nullable=True),
    sa.Column('stats_last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['sport_profile_id'], ['sport_profiles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sport_profile_id')
    )
    op.create_table('matches',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sport_type', sa.Enum('CRICKET', 'FOOTBALL', 'HOCKEY', 'BASKETBALL', name='sport_type'), nullable=True),
    sa.Column('match_type', sa.Enum('T20', 'ODI', 'TEST', 'ONE_DAY', 'THE_HUNDRED', 'CUSTOM', name='match_type'), nullable=False),
    sa.Column('match_category', sa.Enum('CASUAL', 'TOURNAMENT', 'LEAGUE', 'FRIENDLY', 'PRACTICE', name='match_category'), nullable=True),
    sa.Column('match_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('match_preset', sa.String(length=50), nullable=True),
    sa.Column('team_a_id', sa.UUID(), nullable=False),
    sa.Column('team_b_id', sa.UUID(), nullable=False),
    sa.Column('toss_won_by_team_id', sa.UUID(), nullable=True),
    sa.Column('elected_to', sa.Enum('BAT', 'BOWL', name='elected_to'), nullable=True),
    sa.Column('toss_completed_at', sa.DateTime(), nullable=True),
    sa.Column('tournament_id', sa.UUID(), nullable=True),
    sa.Column('round_name', sa.String(length=100), nullable=True),
    sa.Column('venue', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('scheduled_start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('actual_start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('match_status', sa.Enum('SCHEDULED', 'TOSS_PENDING', 'LIVE', 'INNINGS_BREAK', 'COMPLETED', 'ABANDONED', 'CANCELLED', 'DISPUTED', name='match_status'), nullable=True),
    sa.Column('visibility', sa.Enum('PUBLIC', 'PRIVATE', 'FRIENDS_ONLY', name='match_visibility'), nullable=True),
    sa.Column('match_code', sa.String(length=8), nullable=True),
    sa.Column('is_featured', sa.Boolean(), nullable=True),
    sa.Column('winning_team_id', sa.UUID(), nullable=True),
    sa.Column('result_type', sa.Enum('NORMAL', 'TIE', 'NO_RESULT', 'SUPER_OVER', 'FORFEIT', name='result_type'), nullable=True),
    sa.Column('result_margin', sa.String(length=100), nullable=True),
    sa.Column('player_of_match_user_id', sa.UUID(), nullable=True),
    sa.Column('weather_conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pitch_report', sa.Text(), nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('team_a_id != team_b_id', name='different_teams_check'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['player_of_match_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['team_a_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['team_b_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['toss_won_by_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['winning_team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('match_code')
    )
    op.create_table('innings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('innings_number', sa.Integer(), nullable=False),
    sa.Column('batting_team_id', sa.UUID(), nullable=False),
    sa.Column('bowling_team_id', sa.UUID(), nullable=False),
    sa.Column('current_over_number', sa.Integer(), nullable=True),
    sa.Column('current_ball_in_over', sa.Integer(), nullable=True),
    sa.Column('total_runs', sa.Integer(), nullable=True),
    sa.Column('wickets_fallen', sa.Integer(), nullable=True),
    sa.Column('extras', sa.Integer(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=True),
    sa.Column('all_out', sa.Boolean(), nullable=True),
    sa.Column('declared', sa.Boolean(), nullable=True),
    sa.Column('target_runs', sa.Integer(), nullable=True),
    sa.Column('striker_user_id', sa.UUID(), nullable=True),
    sa.Column('non_striker_user_id', sa.UUID(), nullable=True),
    sa.Column('current_bowler_user_id', sa.UUID(), nullable=True),
    sa.Column('next_batsman_user_id', sa.UUID(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('innings_number > 0', name='innings_number_positive'),
    sa.ForeignKeyConstraint(['batting_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['bowling_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['current_bowler_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['next_batsman_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['non_striker_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['striker_user_id'], ['user_auth.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match_archives',
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('archive_status', sa.Enum('ACTIVE', 'ARCHIVED', 'DELETED', name='archive_status'), nullable=True),
    sa.Column('archive_location', sa.String(length=500), nullable=True),
    sa.Column('archive_size_bytes', sa.BigInteger(), nullable=True),
    sa.Column('compression_format', sa.String(length=20), nullable=True),
    sa.Column('match_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('participant_user_ids', sa.ARRAY(sa.UUID()), nullable=False),
    sa.Column('team_ids', sa.ARRAY(sa.UUID()), nullable=False),
    sa.Column('match_date', sa.Date(), nullable=False),
    sa.Column('venue_city', sa.String(length=100), nullable=True),
    sa.Column('match_type', sa.Enum('T20', 'ODI', 'TEST', 'ONE_DAY', 'THE_HUNDRED', 'CUSTOM', name='match_type'), nullable=True),
    sa.Column('retain_permanently', sa.Boolean(), nullable=True),
    sa.Column('retention_reason', sa.Text(), nullable=True),
    sa.Column('scheduled_deletion_at', sa.DateTime(), nullable=True),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(), nullable=True),
    sa.Column('access_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.PrimaryKeyConstraint('match_id')
    )
    op.create_table('match_officials',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.Enum('SCORER', 'UMPIRE', 'THIRD_UMPIRE', 'MATCH_REFEREE', name='official_role'), nullable=False),
    sa.Column('assignment', sa.Enum('TEAM_A', 'TEAM_B', 'NEUTRAL', name='official_assignment'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('left_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user_auth.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match_playing_xi',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('cricket_profile_id', sa.UUID(), nullable=True),
    sa.Column('can_bat', sa.Boolean(), nullable=True),
    sa.Column('can_bowl', sa.Boolean(), nullable=True),
    sa.Column('is_wicket_keeper', sa.Boolean(), nullable=True),
    sa.Column('is_captain', sa.Boolean(), nullable=True),
    sa.Column('batting_position', sa.Integer(), nullable=True),
    sa.Column('bowling_preference', sa.Integer(), nullable=True),
    sa.Column('fielding_position', sa.String(length=50), nullable=True),
    sa.Column('played', sa.Boolean(), nullable=True),
    sa.Column('substitute_for_user_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('batting_position IS NULL OR (batting_position BETWEEN 1 AND 11)', name='batting_position_check'),
    sa.ForeignKeyConstraint(['cricket_profile_id'], ['cricket_player_profiles.id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['substitute_for_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_auth.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match_summaries',
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('team_a_runs', sa.Integer(), nullable=True),
    sa.Column('team_a_wickets', sa.Integer(), nullable=True),
    sa.Column('team_a_overs', sa.Numeric(precision=4, scale=1), nullable=True),
    sa.Column('team_a_run_rate', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('team_b_runs', sa.Integer(), nullable=True),
    sa.Column('team_b_wickets', sa.Integer(), nullable=True),
    sa.Column('team_b_overs', sa.Numeric(precision=4, scale=1), nullable=True),
    sa.Column('team_b_run_rate', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('highest_scorer_user_id', sa.UUID(), nullable=True),
    sa.Column('highest_score', sa.Integer(), nullable=True),
    sa.Column('best_bowler_user_id', sa.UUID(), nullable=True),
    sa.Column('best_bowling_figures', sa.String(length=10), nullable=True),
    sa.Column('total_boundaries', sa.Integer(), nullable=True),
    sa.Column('total_sixes', sa.Integer(), nullable=True),
    sa.Column('total_fours', sa.Integer(), nullable=True),
    sa.Column('highest_partnership', sa.Integer(), nullable=True),
    sa.Column('total_balls', sa.Integer(), nullable=True),
    sa.Column('disputed_balls', sa.Integer(), nullable=True),
    sa.Column('dispute_rate', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('avg_validation_time_ms', sa.Integer(), nullable=True),
    sa.Column('completeness_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('last_updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['best_bowler_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['highest_scorer_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('match_id')
    )
    op.create_table('team_memberships',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('sport_profile_id', sa.UUID(), nullable=False),
    sa.Column('roles', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('cricket_profile_id', sa.UUID(), nullable=True),
    sa.Column('jersey_number', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'BENCHED', 'INJURED', 'SUSPENDED', 'LEFT', name='membership_status'), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('left_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['cricket_profile_id'], ['cricket_player_profiles.id'], ),
    sa.ForeignKeyConstraint(['sport_profile_id'], ['sport_profiles.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user_auth.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bowling_figures',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('innings_id', sa.UUID(), nullable=False),
    sa.Column('bowler_user_id', sa.UUID(), nullable=False),
    sa.Column('cricket_profile_id', sa.UUID(), nullable=True),
    sa.Column('overs_bowled', sa.Numeric(precision=4, scale=1), nullable=True),
    sa.Column('maidens', sa.Integer(), nullable=True),
    sa.Column('runs_conceded', sa.Integer(), nullable=True),
    sa.Column('wickets_taken', sa.Integer(), nullable=True),
    sa.Column('economy_rate', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('wides_conceded', sa.Integer(), nullable=True),
    sa.Column('no_balls_conceded', sa.Integer(), nullable=True),
    sa.Column('is_five_wicket_haul', sa.Boolean(), nullable=True),
    sa.Column('is_hat_trick', sa.Boolean(), nullable=True),
    sa.Column('overs_list', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bowler_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['cricket_profile_id'], ['cricket_player_profiles.id'], ),
    sa.ForeignKeyConstraint(['innings_id'], ['innings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('overs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('innings_id', sa.UUID(), nullable=False),
    sa.Column('over_number', sa.Integer(), nullable=False),
    sa.Column('bowler_user_id', sa.UUID(), nullable=False),
    sa.Column('runs_conceded', sa.Integer(), nullable=True),
    sa.Column('wickets_taken', sa.Integer(), nullable=True),
    sa.Column('legal_deliveries', sa.Integer(), nullable=True),
    sa.Column('extras_in_over', sa.Integer(), nullable=True),
    sa.Column('is_maiden', sa.Boolean(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=True),
    sa.Column('ball_sequence', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('over_number > 0', name='over_number_positive'),
    sa.ForeignKeyConstraint(['bowler_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['innings_id'], ['innings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('balls',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('innings_id', sa.UUID(), nullable=False),
    sa.Column('over_id', sa.UUID(), nullable=False),
    sa.Column('ball_number', sa.Numeric(precision=4, scale=1), nullable=False),
    sa.Column('bowler_user_id', sa.UUID(), nullable=False),
    sa.Column('batsman_user_id', sa.UUID(), nullable=False),
    sa.Column('non_striker_user_id', sa.UUID(), nullable=True),
    sa.Column('runs_scored', sa.Integer(), nullable=True),
    sa.Column('is_wicket', sa.Boolean(), nullable=True),
    sa.Column('is_boundary', sa.Boolean(), nullable=True),
    sa.Column('boundary_type', sa.Enum('FOUR', 'SIX', name='boundary_type'), nullable=True),
    sa.Column('is_legal_delivery', sa.Boolean(), nullable=True),
    sa.Column('extra_type', sa.Enum('NONE', 'WIDE', 'NO_BALL', 'BYE', 'LEG_BYE', 'PENALTY', name='extra_type'), nullable=True),
    sa.Column('extra_runs', sa.Integer(), nullable=True),
    sa.Column('shot_type', sa.Enum('DEFENSIVE', 'DRIVE', 'CUT', 'PULL', 'HOOK', 'SWEEP', 'REVERSE_SWEEP', 'LOFTED', 'FLICK', 'EDGE', 'MISSED', 'LEAVE', name='shot_type'), nullable=True),
    sa.Column('fielding_position', sa.String(length=50), nullable=True),
    sa.Column('wagon_wheel_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_milestone', sa.Boolean(), nullable=True),
    sa.Column('milestone_type', sa.String(length=50), nullable=True),
    sa.Column('validation_source', sa.String(length=50), nullable=True),
    sa.Column('validation_confidence', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('bowled_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('runs_scored >= 0', name='runs_non_negative'),
    sa.ForeignKeyConstraint(['batsman_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['bowler_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['innings_id'], ['innings.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['non_striker_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['over_id'], ['overs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scoring_consensus',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('ball_id', sa.UUID(), nullable=True),
    sa.Column('event_ids', sa.ARRAY(sa.UUID()), nullable=False),
    sa.Column('consensus_reached', sa.Boolean(), nullable=False),
    sa.Column('consensus_method', sa.Enum('EXACT_MATCH', 'MAJORITY_2_OF_3', 'UMPIRE_OVERRIDE', 'TIMEOUT_ACCEPT', 'MANUAL_RESOLVE', name='consensus_method'), nullable=False),
    sa.Column('confidence_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('final_state', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('applied_to_ball', sa.Boolean(), nullable=True),
    sa.Column('final_authority_user_id', sa.UUID(), nullable=True),
    sa.Column('validation_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ball_id'], ['balls.id'], ),
    sa.ForeignKeyConstraint(['final_authority_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scoring_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('innings_id', sa.UUID(), nullable=True),
    sa.Column('ball_id', sa.UUID(), nullable=True),
    sa.Column('scorer_user_id', sa.UUID(), nullable=False),
    sa.Column('scorer_team_side', sa.Enum('TEAM_A', 'TEAM_B', 'UMPIRE', 'SYSTEM', name='scorer_team_side'), nullable=False),
    sa.Column('event_type', sa.Enum('BALL_BOWLED', 'WICKET_FALLEN', 'OVER_COMPLETE', 'INNINGS_COMPLETE', 'BATSMAN_CHANGE', 'BOWLER_CHANGE', 'DRINKS_BREAK', 'INJURY_TIMEOUT', 'INNINGS_START', 'MATCH_START', 'MATCH_END', 'TOSS_COMPLETED', name='event_type'), nullable=False),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('validation_status', sa.Enum('PENDING', 'VALIDATED', 'AUTO_VALIDATED', 'DISPUTED', 'RESOLVED', 'REJECTED', name='validation_status'), nullable=True),
    sa.Column('matching_event_id', sa.UUID(), nullable=True),
    sa.Column('validated_at', sa.DateTime(), nullable=True),
    sa.Column('validated_by_user_id', sa.UUID(), nullable=True),
    sa.Column('event_hash', sa.String(length=64), nullable=False),
    sa.Column('previous_event_hash', sa.String(length=64), nullable=True),
    sa.Column('signature', sa.String(length=256), nullable=True),
    sa.Column('event_timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('sequence_number', sa.BigInteger(), autoincrement=True, nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ball_id'], ['balls.id'], ),
    sa.ForeignKeyConstraint(['innings_id'], ['innings.id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['matching_event_id'], ['scoring_events.id'], ),
    sa.ForeignKeyConstraint(['scorer_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['validated_by_user_id'], ['user_auth.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sequence_number')
    )
    op.create_table('wickets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('ball_id', sa.UUID(), nullable=False),
    sa.Column('innings_id', sa.UUID(), nullable=False),
    sa.Column('batsman_out_user_id', sa.UUID(), nullable=False),
    sa.Column('dismissal_type', sa.Enum('BOWLED', 'CAUGHT', 'LBW', 'RUN_OUT', 'STUMPED', 'HIT_WICKET', 'HANDLED_BALL', 'OBSTRUCTING_FIELD', 'TIMED_OUT', 'RETIRED_HURT', 'RETIRED_OUT', name='dismissal_type'), nullable=False),
    sa.Column('bowler_user_id', sa.UUID(), nullable=True),
    sa.Column('fielder_user_id', sa.UUID(), nullable=True),
    sa.Column('fielder2_user_id', sa.UUID(), nullable=True),
    sa.Column('wicket_number', sa.Integer(), nullable=False),
    sa.Column('team_score_at_wicket', sa.Integer(), nullable=False),
    sa.Column('partnership_runs', sa.Integer(), nullable=True),
    sa.Column('dismissed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('wicket_number BETWEEN 1 AND 10', name='wicket_number_check'),
    sa.ForeignKeyConstraint(['ball_id'], ['balls.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['batsman_out_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['bowler_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['fielder2_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['fielder_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['innings_id'], ['innings.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ball_id')
    )
    op.create_table('batting_innings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('innings_id', sa.UUID(), nullable=False),
    sa.Column('batsman_user_id', sa.UUID(), nullable=False),
    sa.Column('cricket_profile_id', sa.UUID(), nullable=True),
    sa.Column('batting_position', sa.Integer(), nullable=True),
    sa.Column('runs_scored', sa.Integer(), nullable=True),
    sa.Column('balls_faced', sa.Integer(), nullable=True),
    sa.Column('fours', sa.Integer(), nullable=True),
    sa.Column('sixes', sa.Integer(), nullable=True),
    sa.Column('strike_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('is_out', sa.Boolean(), nullable=True),
    sa.Column('wicket_id', sa.UUID(), nullable=True),
    sa.Column('is_not_out', sa.Boolean(), nullable=True),
    sa.Column('did_not_bat', sa.Boolean(), nullable=True),
    sa.Column('retired_hurt', sa.Boolean(), nullable=True),
    sa.Column('retired_hurt_at_runs', sa.Integer(), nullable=True),
    sa.Column('returned_to_bat_after_wicket', sa.Integer(), nullable=True),
    sa.Column('achieved_fifty', sa.Boolean(), nullable=True),
    sa.Column('achieved_hundred', sa.Boolean(), nullable=True),
    sa.Column('started_batting_at', sa.DateTime(), nullable=True),
    sa.Column('ended_batting_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('batting_position IS NULL OR (batting_position BETWEEN 1 AND 11)', name='batting_pos_check'),
    sa.ForeignKeyConstraint(['batsman_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['cricket_profile_id'], ['cricket_player_profiles.id'], ),
    sa.ForeignKeyConstraint(['innings_id'], ['innings.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['wicket_id'], ['wickets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('partnerships',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('innings_id', sa.UUID(), nullable=False),
    sa.Column('batsman1_user_id', sa.UUID(), nullable=False),
    sa.Column('batsman2_user_id', sa.UUID(), nullable=False),
    sa.Column('partnership_number', sa.Integer(), nullable=False),
    sa.Column('partnership_runs', sa.Integer(), nullable=True),
    sa.Column('balls_faced', sa.Integer(), nullable=True),
    sa.Column('batsman1_runs', sa.Integer(), nullable=True),
    sa.Column('batsman2_runs', sa.Integer(), nullable=True),
    sa.Column('ended_by_wicket_id', sa.UUID(), nullable=True),
    sa.Column('ended_at_team_score', sa.Integer(), nullable=True),
    sa.Column('is_fifty_partnership', sa.Boolean(), nullable=True),
    sa.Column('is_hundred_partnership', sa.Boolean(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['batsman1_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['batsman2_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['ended_by_wicket_id'], ['wickets.id'], ),
    sa.ForeignKeyConstraint(['innings_id'], ['innings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scoring_disputes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('match_id', sa.UUID(), nullable=False),
    sa.Column('ball_id', sa.UUID(), nullable=True),
    sa.Column('scorer_a_event_id', sa.UUID(), nullable=False),
    sa.Column('scorer_b_event_id', sa.UUID(), nullable=False),
    sa.Column('umpire_event_id', sa.UUID(), nullable=True),
    sa.Column('dispute_type', sa.Enum('RUNS_MISMATCH', 'WICKET_MISMATCH', 'EXTRA_MISMATCH', 'BOUNDARY_MISMATCH', 'DISMISSAL_TYPE_MISMATCH', 'OTHER', name='dispute_type'), nullable=False),
    sa.Column('scorer_a_claim', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('scorer_b_claim', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('umpire_claim', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('difference_summary', sa.Text(), nullable=True),
    sa.Column('resolution_status', sa.Enum('PENDING', 'RESOLVED', 'ESCALATED', 'ABANDONED', name='resolution_status'), nullable=True),
    sa.Column('resolved_by_user_id', sa.UUID(), nullable=True),
    sa.Column('resolution_method', sa.String(length=50), nullable=True),
    sa.Column('final_decision', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('resolution_time_seconds', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['ball_id'], ['balls.id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resolved_by_user_id'], ['user_auth.user_id'], ),
    sa.ForeignKeyConstraint(['scorer_a_event_id'], ['scoring_events.id'], ),
    sa.ForeignKeyConstraint(['scorer_b_event_id'], ['scoring_events.id'], ),
    sa.ForeignKeyConstraint(['umpire_event_id'], ['scoring_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('scoring_disputes')
    op.drop_table('partnerships')
    op.drop_table('batting_innings')
    op.drop_table('wickets')
    op.drop_table('scoring_events')
    op.drop_table('scoring_consensus')
    op.drop_table('balls')
    op.drop_table('overs')
    op.drop_table('bowling_figures')
    op.drop_table('team_memberships')
    op.drop_table('match_summaries')
    op.drop_table('match_playing_xi')
    op.drop_table('match_officials')
    op.drop_table('match_archives')
    op.drop_table('innings')
    op.drop_table('matches')
    op.drop_table('cricket_player_profiles')
    op.drop_table('user_profiles')
    op.drop_table('teams')
    op.drop_table('sport_profiles')
    op.drop_table('user_auth')
    # ### end Alembic commands ###
