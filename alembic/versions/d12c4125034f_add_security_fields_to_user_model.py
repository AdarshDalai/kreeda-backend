"""Add security fields to user model

Revision ID: d12c4125034f
Revises: 9215d49aac05
Create Date: 2025-08-21 13:43:07.021484

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd12c4125034f'
down_revision: Union[str, None] = '9215d49aac05'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_tournaments_sport', table_name='tournaments')
    op.drop_index('idx_tournaments_status', table_name='tournaments')
    op.drop_table('tournaments')
    op.drop_index('idx_matches_status', table_name='matches')
    op.drop_index('idx_matches_tournament_id', table_name='matches')
    op.drop_table('matches')
    op.drop_index('idx_teams_sport', table_name='teams')
    op.drop_table('teams')
    op.drop_index('idx_scores_match_id', table_name='scores')
    op.drop_table('scores')
    op.add_column('users', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('failed_login_attempts', sa.Integer(), nullable=False))
    op.add_column('users', sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('email_verification_token_hash', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('email_verification_token_expires', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_username', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'verification_token_expires')
    op.drop_column('users', 'verification_token_hash')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('verification_token_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('verification_token_expires', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_column('users', 'email_verification_token_expires')
    op.drop_column('users', 'email_verification_token_hash')
    op.drop_column('users', 'locked_until')
    op.drop_column('users', 'failed_login_attempts')
    op.drop_column('users', 'last_login')
    op.create_table('scores',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('match_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('team_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sport', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('score_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('innings', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], name='scores_match_id_fkey'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name='scores_team_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='scores_pkey')
    )
    op.create_index('idx_scores_match_id', 'scores', ['match_id'], unique=False)
    op.create_table('teams',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sport', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('logo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='teams_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='teams_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_teams_sport', 'teams', ['sport'], unique=False)
    op.create_table('matches',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tournament_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('team_a_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('team_b_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sport', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('match_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'scheduled'::character varying"), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('ended_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('venue', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('weather_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['team_a_id'], ['teams.id'], name='matches_team_a_id_fkey'),
    sa.ForeignKeyConstraint(['team_b_id'], ['teams.id'], name='matches_team_b_id_fkey'),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], name='matches_tournament_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='matches_pkey')
    )
    op.create_index('idx_matches_tournament_id', 'matches', ['tournament_id'], unique=False)
    op.create_index('idx_matches_status', 'matches', ['status'], unique=False)
    op.create_table('tournaments',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sport', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('tournament_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'upcoming'::character varying"), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('max_teams', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('entry_fee', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('prize_pool', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='tournaments_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='tournaments_pkey')
    )
    op.create_index('idx_tournaments_status', 'tournaments', ['status'], unique=False)
    op.create_index('idx_tournaments_sport', 'tournaments', ['sport'], unique=False)
    # ### end Alembic commands ###
