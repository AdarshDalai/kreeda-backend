name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, production-config ]
  pull_request:
    branches: [ main, master, production-config ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Testing
  test:
    name: Run Tests and Code Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: kreeda_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 black isort

    - name: Code formatting check (Black)
      run: |
        black --check --diff app/

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff app/

    - name: Linting (flake8)
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/kreeda_test" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "ENVIRONMENT=testing" >> .env
        echo "DEBUG=false" >> .env

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          test-results/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json || true

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Build and Deploy to Render
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/production-config' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations (if needed)
      run: |
        echo "Database migrations will be handled by Render deployment"

    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

    - name: Health Check
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f ${{ secrets.RENDER_APP_URL }}/health || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Deployment to Render successful!"
        echo "üöÄ Application is live at: ${{ secrets.RENDER_APP_URL }}"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment to Render failed!"
        exit 1

  # API Documentation Deployment (Optional)
  docs:
    name: Deploy API Documentation
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/production-config' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate OpenAPI Spec
      run: |
        echo "OpenAPI spec will be available at ${{ secrets.RENDER_APP_URL }}/docs"

    - name: Validate API Endpoints
      run: |
        sleep 10  # Wait for app to be ready
        curl -f ${{ secrets.RENDER_APP_URL }}/openapi.json || exit 1

  # Postman Collection Update
  postman:
    name: Update Postman Collection
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/production-config' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Generate Postman Collection
      run: |
        echo "Generating Postman collection from deployed API..."
        # The generate_postman_collection.py script will use the deployed URL
        python generate_postman_collection.py --url ${{ secrets.RENDER_APP_URL }}

    - name: Upload Postman Collection
      uses: actions/upload-artifact@v3
      with:
        name: postman-collection
        path: postman/
