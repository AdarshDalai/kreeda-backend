{
  "info": {
    "_postman_id": "a867a7f0-5b5b-4615-967d-e09608d3178a",
    "name": "Kreeda API Collection",
    "description": "Kreeda - Digital Cricket Scorekeeping Platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Uncategorized",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ],
              "query": []
            },
            "description": ""
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Endpoints for Uncategorized",
      "event": []
    },
    {
      "name": "Auth",
      "item": [
        {
          "name": "Auth Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "health"
              ],
              "query": []
            },
            "description": "Health check for auth endpoints"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "register"
              ],
              "query": []
            },
            "description": "Register a new user with Supabase Auth",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "// Handle registration response",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.access_token) {",
                  "        pm.environment.set('access_token', responseJson.access_token);",
                  "        pm.environment.set('refresh_token', responseJson.refresh_token);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "login"
              ],
              "query": []
            },
            "description": "Login user with Supabase Auth",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "// Store access token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.access_token) {",
                  "        pm.environment.set('access_token', responseJson.access_token);",
                  "        pm.environment.set('refresh_token', responseJson.refresh_token);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Oauth Login",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/oauth/{{provider}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "oauth",
                "{{provider}}"
              ],
              "query": []
            },
            "description": "Initiate OAuth login with provider",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "// Store access token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.access_token) {",
                  "        pm.environment.set('access_token', responseJson.access_token);",
                  "        pm.environment.set('refresh_token', responseJson.refresh_token);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "refresh"
              ],
              "query": []
            },
            "description": "Refresh access token",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "logout"
              ],
              "query": []
            },
            "description": "Logout user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/reset-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "reset-password"
              ],
              "query": []
            },
            "description": "Send password reset email",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify Otp",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/verify-otp",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "verify-otp"
              ],
              "query": []
            },
            "description": "Verify OTP token",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "me"
              ],
              "query": []
            },
            "description": "Get current authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Current User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "me"
              ],
              "query": []
            },
            "description": "Update current user's profile",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Endpoints for auth",
      "event": []
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Users Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "health"
              ],
              "query": []
            },
            "description": "Health check for users endpoints"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "users"
              ],
              "query": [
                {
                  "key": "skip",
                  "value": "{{skip}}",
                  "description": "Number of users to skip",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "Number of users to retrieve",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "{{search}}",
                  "description": "Search term for username, full name, or email",
                  "disabled": true
                },
                {
                  "key": "is_active",
                  "value": "{{is_active}}",
                  "description": "Filter by active status",
                  "disabled": true
                }
              ]
            },
            "description": "Get list of users with optional filters"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/count",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "count"
              ],
              "query": [
                {
                  "key": "search",
                  "value": "{{search}}",
                  "description": "Search term for username, full name, or email",
                  "disabled": true
                },
                {
                  "key": "is_active",
                  "value": "{{is_active}}",
                  "description": "Filter by active status",
                  "disabled": true
                }
              ]
            },
            "description": "Get total count of users with filters"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "search"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "{{q}}",
                  "description": "Search query for username",
                  "disabled": false
                },
                {
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "Number of results to return",
                  "disabled": true
                }
              ]
            },
            "description": "Search users by username for autocomplete"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "{{user_id}}"
              ],
              "query": []
            },
            "description": "Get user by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "{{user_id}}"
              ],
              "query": [
                {
                  "key": "update_supabase",
                  "value": "{{update_supabase}}",
                  "description": "Update user in Supabase as well",
                  "disabled": true
                }
              ]
            },
            "description": "Update user information",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{user_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "{{user_id}}"
              ],
              "query": [
                {
                  "key": "hard_delete",
                  "value": "{{hard_delete}}",
                  "description": "Permanently delete user (default: soft delete)",
                  "disabled": true
                },
                {
                  "key": "delete_from_supabase",
                  "value": "{{delete_from_supabase}}",
                  "description": "Delete user from Supabase as well",
                  "disabled": true
                }
              ]
            },
            "description": "Delete user (soft delete by default, hard delete optional)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Endpoints for users",
      "event": []
    },
    {
      "name": "Teams",
      "item": [
        {
          "name": "Teams Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/teams/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "teams",
                "health"
              ],
              "query": []
            },
            "description": ""
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Teams",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/teams/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "query": []
            },
            "description": "Get all teams for current user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Team",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/teams/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "query": []
            },
            "description": "Create a new cricket team",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Team",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/teams/{{team_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "teams",
                "{{team_id}}"
              ],
              "query": []
            },
            "description": "Get specific team details"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Team",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/teams/{{team_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "teams",
                "{{team_id}}"
              ],
              "query": []
            },
            "description": "Delete a team (only captain can delete)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Team Members",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/teams/{{team_id}}/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "teams",
                "{{team_id}}",
                "members"
              ],
              "query": []
            },
            "description": "Get all members of a team"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Join Team",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/teams/{{team_id}}/join",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "teams",
                "{{team_id}}",
                "join"
              ],
              "query": []
            },
            "description": "Join an existing team"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Endpoints for teams",
      "event": []
    },
    {
      "name": "Cricket-Integrity",
      "item": [
        {
          "name": "Cricket Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "health"
              ],
              "query": []
            },
            "description": ""
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Matches",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches"
              ],
              "query": []
            },
            "description": "Get all matches for the user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Match",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches"
              ],
              "query": []
            },
            "description": "Create a new cricket match",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Match",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}"
              ],
              "query": []
            },
            "description": "Get match by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Assign Match Scorers",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}/scorers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}",
                "scorers"
              ],
              "query": []
            },
            "description": "Assign official scorers for a match",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Match Scoring Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}/scoring-status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}",
                "scoring-status"
              ],
              "query": []
            },
            "description": "Get scoring status and integrity information for a match"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Record Ball With Integrity",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}/balls",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}",
                "balls"
              ],
              "query": []
            },
            "description": "Record a ball with integrity verification",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Resolve Scoring Dispute",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}/disputes/{{innings}}/{{over_number}}/{{ball_number}}/resolve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}",
                "disputes",
                "{{innings}}",
                "{{over_number}}",
                "{{ball_number}}",
                "resolve"
              ],
              "query": []
            },
            "description": "Resolve a scoring dispute (umpire/referee only)",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Scorecard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}/scorecard",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}",
                "scorecard"
              ],
              "query": []
            },
            "description": "Get match scorecard (only verified balls)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Record Ball Legacy",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}/balls/legacy",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}",
                "balls",
                "legacy"
              ],
              "query": []
            },
            "description": "Legacy ball recording without integrity checks (for testing only)",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Live Match Updates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/matches/{{match_id}}/live-updates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "matches",
                "{{match_id}}",
                "live-updates"
              ],
              "query": [
                {
                  "key": "last_update",
                  "value": "{{last_update}}",
                  "description": "",
                  "disabled": true
                }
              ]
            },
            "description": "Get live match updates for spectators"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Endpoints for cricket-integrity",
      "event": []
    },
    {
      "name": "Cricket",
      "item": [
        {
          "name": "Get Matches",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/cricket",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "cricket"
              ],
              "query": []
            },
            "description": "Get all matches"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Match",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/cricket",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "cricket"
              ],
              "query": []
            },
            "description": "Create a new cricket match",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Match",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/cricket/{{match_id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "cricket",
                "{{match_id}}"
              ],
              "query": []
            },
            "description": "Get specific match details"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Record Ball",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/cricket/{{match_id}}/balls",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "cricket",
                "{{match_id}}",
                "balls"
              ],
              "query": []
            },
            "description": "Record a ball in the cricket match",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Scorecard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/matches/cricket/{{match_id}}/scorecard",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "matches",
                "cricket",
                "{{match_id}}",
                "scorecard"
              ],
              "query": []
            },
            "description": "Get live scorecard for a match"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Endpoints for cricket",
      "event": []
    },
    {
      "name": "Statistics",
      "item": [
        {
          "name": "Stats Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/stats/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "stats",
                "health"
              ],
              "query": []
            },
            "description": ""
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Player Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/stats/players/{{player_id}}/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "stats",
                "players",
                "{{player_id}}",
                "stats"
              ],
              "query": []
            },
            "description": "Get comprehensive player statistics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Team Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/stats/teams/{{team_id}}/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "stats",
                "teams",
                "{{team_id}}",
                "stats"
              ],
              "query": [
                {
                  "key": "season_year",
                  "value": "{{season_year}}",
                  "description": "",
                  "disabled": true
                }
              ]
            },
            "description": "Get team statistics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Team Form",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/stats/teams/{{team_id}}/form",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "stats",
                "teams",
                "{{team_id}}",
                "form"
              ],
              "query": [
                {
                  "key": "last_matches",
                  "value": "{{last_matches}}",
                  "description": "",
                  "disabled": true
                }
              ]
            },
            "description": "Get recent form for a team"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Match Insights",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Authentication token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/stats/matches/{{match_id}}/insights",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "stats",
                "matches",
                "{{match_id}}",
                "insights"
              ],
              "query": []
            },
            "description": "Get detailed match insights and analytics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has valid JSON', function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});"
                ]
              }
            }
          ]
        }
      ],
      "description": "Endpoints for statistics",
      "event": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:8000');",
          "}",
          "",
          "// Set default headers",
          "pm.request.headers.add({",
          "    key: 'Content-Type',",
          "    value: 'application/json'",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    }
  ]
}